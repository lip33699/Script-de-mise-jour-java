# VARIABLE GLOBAL
###########################################################

export PATH=/bin:/usr/bin:/usr/sbin:/tools/admin/bin
ProductVersion="${CTM_VERSION:-9.0.21.300}"
Repository="/softwares/PRODUITS/CONTROLM"
OS=$1
OPT=$2
Envir=$3
OSuname=$(uname)
OSlevel=$(oslevel)

#- Fonctions -##############################################

function Envir
{
case $Envir in
              HP|PR) ;;
                  *) echo "Parametre Envir invalide : $4"
                     echo "Autorisation pour : HP|PR"
                     echo "Abandon..."
                     exit 1 ;;
esac
}
# FR: Vérifie que l'environnement fourni (HP ou PR) est valide; sinon, affiche un message d'erreur et quitte avec un code non nul.
# EN: Validates that the provided environment (HP or PR) is allowed; otherwise, prints an error and exits with a non‑zero code.

function nimmount
{
    echo "-> Montage du serveur NIM"

    /tools/admin/bin/mountnim
}
# FR: Monte le serveur NIM (infrastructure AIX) via un wrapper interne 'mountnim' pour accéder aux médias/partages.
# EN: Mounts the NIM server (AIX infra) using internal 'mountnim' wrapper to access media/shares.

function nimunmount
{
    echo "-> Demontage du serveur NIM"

    /tools/admin/bin/umountnim
}
# FR: Démonte le serveur NIM après usage via 'umountnim' (nettoyage des montages réseau).
# EN: Unmounts the NIM server after use via 'umountnim' (network mount cleanup).

# GESTION AIX
###########################################################

function installaixstandalone
{

    echo "-> Installation Control-M Agent AIX vers ${ProductVersion} (standalone)"
    ensure_java
    export PATH=$PATH:$HOME/bin:/tools/admin/local/bin:/tools/admin/bin:/tools/admin/san:/usr/local/bin:/sbin
    REPO_VER="${Repository}/V${ProductVersion}/AGENT"
    PARAM_XML="${REPO_VER}/agent_params.xml"
    if [ -x "${REPO_VER}/AIX/setup.sh" ] && [ -f "${PARAM_XML}" ]; then
        echo "-> Utilisation du média versionné: ${REPO_VER}"
        "${REPO_VER}/AIX/setup.sh" -silent "${PARAM_XML}" -BMC_INST_JAVA_HOME "${BMC_INST_JAVA_HOME}"
    else
        echo "-> Média versionné introuvable, fallback vers wrapper legacy Install_Aix_CTMAGT.ksh"
        BMC_INST_JAVA_HOME="${BMC_INST_JAVA_HOME}" "${Repository}/AixInstall/Install_Aix_CTMAGT.ksh" -e "${Envir}"
    fi

}
# FR: Installe l'agent Control‑M en AIX (mode standalone). Prépare Java (ensure_java), construit le chemin du média versionné (V${ProductVersion}),
#     et exécute l'installateur officiel en silencieux avec le param.xml + BMC_INST_JAVA_HOME; sinon, bascule vers le wrapper legacy interne.
# EN: Installs the Control‑M agent on AIX (standalone). Prepares Java (ensure_java), builds the versioned media path (V${ProductVersion}),
#     then runs the official silent installer with param.xml + BMC_INST_JAVA_HOME; otherwise falls back to the internal legacy wrapper.

function installaixclusteractif
{

    echo "-> Installation Control-M Agent AIX ${ProductVersion} (cluster ACTIF)"
    ensure_java
    export PATH=$PATH:$HOME/bin:/tools/admin/local/bin:/tools/admin/bin:/tools/admin/san:/usr/local/bin:/sbin
    REPO_VER="${Repository}/V${ProductVersion}/AGENT"
    PARAM_XML="${REPO_VER}/agent_params.xml"
    if [ -x "${REPO_VER}/AIX/setup.sh" ] && [ -f "${PARAM_XML}" ]; then
        echo "-> Utilisation du média versionné: ${REPO_VER}"
        "${REPO_VER}/AIX/setup.sh" -silent "${PARAM_XML}" -BMC_INST_JAVA_HOME "${BMC_INST_JAVA_HOME}"
        echo "-> Pensez à appliquer la config cluster (script post-install interne)"
    else
        echo "-> Média versionné introuvable, fallback vers wrapper legacy Install_Aix_CTMAGT_Cluster_ACTIF.ksh"
        BMC_INST_JAVA_HOME="${BMC_INST_JAVA_HOME}" "${Repository}/AixInstall/Install_Aix_CTMAGT_Cluster_ACTIF.ksh" -e "${Envir}"
    fi

}
# FR: Installe l'agent en contexte cluster AIX (nœud actif). Lance l'installateur silencieux; rappelle d'appliquer la config cluster post‑install.
# EN: Installs the agent in AIX cluster context (active node). Runs the silent installer; reminds to apply post‑install cluster configuration.

function installaixclusterpassif
{

    echo "-> Installation Control-M Agent AIX ${ProductVersion} (cluster PASSIF)"
    ensure_java
    export PATH=$PATH:$HOME/bin:/tools/admin/local/bin:/tools/admin/bin:/tools/admin/san:/usr/local/bin:/sbin
    REPO_VER="${Repository}/V${ProductVersion}/AGENT"
    PARAM_XML="${REPO_VER}/agent_params.xml"
    if [ -x "${REPO_VER}/AIX/setup.sh" ] && [ -f "${PARAM_XML}" ]; then
        echo "-> Utilisation du média versionné: ${REPO_VER}"
        "${REPO_VER}/AIX/setup.sh" -silent "${PARAM_XML}" -BMC_INST_JAVA_HOME "${BMC_INST_JAVA_HOME}"
        echo "-> Pensez à appliquer la config cluster (script post-install interne)"
    else
        echo "-> Média versionné introuvable, fallback vers wrapper legacy Install_Aix_CTMAGT_Cluster_PASSIF.ksh"
        BMC_INST_JAVA_HOME="${BMC_INST_JAVA_HOME}" "${Repository}/AixInstall/Install_Aix_CTMAGT_Cluster_PASSIF.ksh" -e "${Envir}"
    fi

}
# FR: Installe l'agent sur nœud passif du cluster AIX. Même logique que l'actif; insiste sur l'étape post‑install cluster.
# EN: Installs the agent on the passive AIX cluster node. Same logic as active; emphasizes the post‑install cluster step.

function upgradeagentaix
{
    echo "-> Upgrade Control-M Agent AIX vers ${ProductVersion}"
    ensure_java
    export PATH=$PATH:$HOME/bin:/tools/admin/local/bin:/tools/admin/bin:/tools/admin/san:/usr/local/bin:/sbin
    cd /tools/list/ctmagent/ctmagt
    PARAM_XML="${Repository}/V${ProductVersion}/AGENT/agent_params.xml"
    ${Repository}/V${ProductVersion}/AGENT/AIX/setup.sh \
        -silent "${PARAM_XML}" \
        -BMC_INST_JAVA_HOME "${BMC_INST_JAVA_HOME}"
}
# FR: Met à niveau l'agent AIX vers la version ciblée en mode silencieux avec param.xml et BMC_INST_JAVA_HOME; exige ensure_java avant.
# EN: Upgrades AIX agent to the target version silently using param.xml and BMC_INST_JAVA_HOME; requires ensure_java first.

function StartctmagtAix
{
    echo "-> Start Control-M Agent AIX"
    /tools/list/ctmagent/ctmagt/ctm/scripts/start-ag -u ctmagt -p all
    chmod 644 /tools/list/ctmagent/ctmagt/ctm/proclog/start_ag*
    chmod -R 755 /tools/list/ctmagent/ctmagt/ctm/proclog/LogsZip
    chmod -R 755 /tools/list/ctmagent/ctmagt/ctm/proclog/Metrics
}
# FR: Démarre l'agent AIX via le script officiel 'start-ag' puis normalise les permissions de journaux/proclog.
# EN: Starts the AIX agent via official 'start-ag' script and normalizes logs/proclog permissions.

function StopctmagtAix
{
    echo "-> Stop Control-M Agent AIX"
    /tools/list/ctmagent/ctmagt/ctm/scripts/shut-ag -u ctmagt -p all
}
# FR: Arrête proprement l'agent AIX via 'shut-ag' en arrêtant tous les processus (option -p all).
# EN: Gracefully stops the AIX agent using 'shut-ag', stopping all agent processes (-p all).

function uninstallCTMAix
{
    echo "-> desinstallation de Control-M sur AIX"

    export PATH=$PATH:$HOME/bin:/tools/admin/local/bin:/tools/admin/bin:/tools/admin/san:/usr/local/bin:/sbin
    ${Repository}/AixInstall/CTMuninstall.ksh
}
# FR: Désinstalle l'agent AIX via un wrapper interne 'CTMuninstall.ksh' (peut encapsuler la désinstall BMC et le nettoyage).
# EN: Uninstalls the AIX agent using internal 'CTMuninstall.ksh' wrapper (likely encapsulates BMC uninstall and cleanup).

# GESTION LINUX
###########################################################

function installlinuxstandalone
{

    echo "-> Installation Control-M Agent LINUX vers ${ProductVersion} (standalone)"
    ensure_java
    export PATH=$PATH:$HOME/bin:/tools/admin/local/bin:/tools/admin/bin:/tools/admin/san:/usr/local/bin:/sbin
    REPO_VER="${Repository}/V${ProductVersion}/AGENT"
    PARAM_XML="${REPO_VER}/agent_params.xml"
    if [ -x "${REPO_VER}/Linux/setup.sh" ] && [ -f "${PARAM_XML}" ]; then
        echo "-> Utilisation du média versionné: ${REPO_VER}"
        "${REPO_VER}/Linux/setup.sh" -silent "${PARAM_XML}" -BMC_INST_JAVA_HOME "${BMC_INST_JAVA_HOME}"
    else
        echo "-> Média versionné introuvable, fallback vers wrapper legacy Install_Linux_CTMAGT.ksh"
        BMC_INST_JAVA_HOME="${BMC_INST_JAVA_HOME}" "${Repository}/LinuxInstall/Install_Linux_CTMAGT.ksh" -e "${Envir}"
    fi

}
# FR: Installe l'agent Linux standalone via l'installateur officiel silencieux (param.xml + BMC_INST_JAVA_HOME) avec repli sur wrapper legacy.
# EN: Installs the Linux standalone agent using the official silent installer (param.xml + BMC_INST_JAVA_HOME), with fallback to legacy wrapper.

function upgradeagentlinux
{
    echo "-> Upgrade Control-M Agent LINUX vers ${ProductVersion}"
    ensure_java
    export PATH=$PATH:$HOME/bin:/tools/admin/local/bin:/tools/admin/bin:/tools/admin/san:/usr/local/bin:/sbin
    cd /tools/list/ctmagent/ctmagt
    PARAM_XML="${Repository}/V${ProductVersion}/AGENT/agent_params.xml"
    ${Repository}/V${ProductVersion}/AGENT/Linux/setup.sh \
        -silent "${PARAM_XML}" \
        -BMC_INST_JAVA_HOME "${BMC_INST_JAVA_HOME}"
}
# FR: Met à niveau l'agent Linux en mode silencieux avec param.xml; dépend de ensure_java et du média versionné cohérent.
# EN: Upgrades the Linux agent silently using param.xml; depends on ensure_java and consistent versioned media.

function uninstallCTMLinux
{
    echo "-> desinstallation de Control-M sur LINUX"
    export PATH=$PATH:$HOME/bin:/tools/admin/local/bin:/tools/admin/bin:/tools/admin/san:/usr/local/bin:/sbin
    ${Repository}/LinuxInstall/CTMuninstall.ksh
}
# FR: Désinstalle l'agent Linux via wrapper interne 'CTMuninstall.ksh' (nettoyage et suppression).
# EN: Uninstalls the Linux agent via internal 'CTMuninstall.ksh' wrapper (cleanup and removal).

function StartctmagtLinux
{
   CheckSystemd=$(command -v systemctl >/dev/null 2>&1 && echo yes || echo no)
   if [[ ${CheckVersion} < 7 ]] ; then
    echo "-> Start Control-M Agent LINUX without use systemctl..."
    /tools/list/ctmagent/ctmagt/ctm/scripts/start-ag -u ctmagt -p all
   else
    echo "-> Start Control-M Agent LINUX with systemctl..."
    systemctl start ctmagent.service
   fi
   chmod 644 /tools/list/ctmagent/ctmagt/ctm/proclog/start_ag*
   chmod -R 755 /tools/list/ctmagent/ctmagt/ctm/proclog/LogsZip
   chmod -R 755 /tools/list/ctmagent/ctmagt/ctm/proclog/Metrics
}
# FR: Démarre l'agent Linux; si systemd non utilisé (vieux OS), appelle le script start-ag, sinon service systemctl; puis ajuste les permissions.
# EN: Starts the Linux agent; if systemd isn't used (older OS), call start-ag script, else systemctl service; then fix permissions.

function StopctmagtLinux
{
   CheckSystemd=$(command -v systemctl >/dev/null 2>&1 && echo yes || echo no)
   if [[ ${CheckVersion} < 7 ]] ; then
    echo "-> Stop Control-M Agent LINUX without use systemctl..."
    /tools/list/ctmagent/ctmagt/ctm/scripts/shut-ag -u ctmagt -p all
   else
    echo "-> Stop Control-M Agent LINUX with systemctl..."
    systemctl stop ctmagent.service
   fi
}
# FR: Arrête l'agent Linux via shut-ag si pas de systemd, sinon via systemctl.
# EN: Stops the Linux agent using shut-ag when systemd is absent; otherwise via systemctl.

function StartctmemLinux
{
   echo "-> Start Control-M EM LINUX with systemctl..."
   systemctl start ctmem.service
}
# FR: Démarre le service Control-M EM sous Linux via systemctl.
# EN: Starts Control-M EM service on Linux via systemctl.

function StopctmemLinux
{
   echo "-> Stop Control-M EM LINUX with systemctl..."
   systemctl stop ctmem.service
}
# FR: Arrête le service Control-M EM sous Linux via systemctl.
# EN: Stops Control-M EM service on Linux via systemctl.

function StartctmserverLinux
{
   echo "-> Start Control-M Server LINUX with systemctl..."
   systemctl start ctmserver.service
}
# FR: Démarre Control-M Server sur Linux via systemctl.
# EN: Starts Control-M Server on Linux via systemctl.

function StopctmserverLinux
{
   echo "-> Stop Control-M Server LINUX with systemctl..."
   systemctl stop ctmserver.service
}
# FR: Arrête Control-M Server sur Linux via systemctl.
# EN: Stops Control-M Server on Linux via systemctl.

function StartctmcaLinux
{
   echo "-> Start Control-M Serverr-CA LINUX with systemctl..."
   systemctl start ctmca.service
}
# FR: Démarre le composant Control-M Server-CA via systemctl.
# EN: Starts the Control-M Server-CA component via systemctl.

function StopctmcaLinux
{
   echo "-> Stop Control-M Server-CA LINUX with systemctl..."
   systemctl stop ctmca.service
}
# FR: Arrête le composant Control-M Server-CA via systemctl.
# EN: Stops the Control-M Server-CA component via systemctl.

# AUTRE
###########################################################

function usage
{
    clear
    echo
    echo "Usage : exploitcontrolm.ksh [AIX]   [INSTALLSTANDALONE|INSTALLCLUSTERACTIF|INSTALLCLUSTERPASSIF] [HP|PR]"
    echo "                            [LINUX] [INSTALLSTANDALONE]                                          [HP|PR]"
    echo
    echo "                            [AIX]   [UPDGRADEAGENT]"
    echo "                            [LINUX] [UPDGRADEAGENT]"
    echo
    echo "                            [AIX]   [STARTCTMAGTAIX|STOPCTMAGTAIX]"
    echo "                            [LINUX] [STARTCTMAGTLINUX|STOPCTMAGTLINUX]"
    echo
    echo "                            [AIX]   [UNINSTALLCTMAIX]"
    echo "                            [LINUX] [UNINSTALLCTMLINUX]"
    echo
    echo "                            [LINUX] [STARTCTMEM|STOPCTMEM]"
    echo
    echo "                            [LINUX] [STARTCTMSERVER|STOPCTMSERVER]"
    echo "                            [LINUX] [STARTCTMCA|STOPCTMCA]"
    echo
    echo "                            [AUTRE] [MOUNTNIM|UMOUNTNIM"
}
# FR: Affiche l'aide/usage du script avec toutes les combinaisons OS/OPTIONS prises en charge.
# EN: Prints the script usage/help listing all supported OS/OPTIONS combinations.

case $OS in

    AIX)
        echo "OS         : ${OSuname}"
        echo "OS version : ${OSlevel}"
        echo ${OSuname} | grep -i AIX > /dev/null
        RC=${?}
        if [[ ${RC} != 0 ]] ; then
         echo "################################################"
         echo "ABORTED TOOLS :                                 "
         echo "Selected COMMAND is not for this OS : ${OSuname}"
         echo "################################################"
         exit 1
        fi
        case $OPT in
            INSTALLSTANDALONE)
                Envir
                nimmount
                installaixstandalone
                nimunmount
                ;;
            INSTALLCLUSTERACTIF)
                Envir
                nimmount
                installaixclusteractif
                nimunmount
                ;;
            INSTALLCLUSTERPASSIF)
                Envir
                nimmount
                installaixclusterpassif
                nimunmount
                ;;
            UPDGRADEAGENT)
                nimmount
                upgradeagentaix
                nimunmount
                ;;
            STARTCTMAGTAIX)
                StartctmagtAix
                ;;
            STOPCTMAGTAIX)
                StopctmagtAix
                ;;
            UNINSTALLCTMAIX)
                nimmount
                uninstallCTMAix
                nimunmount
                ;;
            *)
                usage
                ;;
        esac
        ;;
# FR: Branche AIX: vérifie que l'OS courant est bien AIX, sinon abandonne. Selon l'option ($OPT), enchaîne les fonctions (montage NIM, install/upgrade, démontage).
# EN: AIX branch: ensures the current OS is AIX, otherwise aborts. Based on option ($OPT), chains functions (NIM mount, install/upgrade, unmount).

    LINUX)
        echo "OS         : ${OSuname}"
        echo "OS version : ${OSlevel}"
        echo ${OSuname} | grep -i LINUX > /dev/null
        RC=${?}
        if [[ ${RC} != 0 ]] ; then
         echo "################################################"
         echo "ABORTED TOOLS :                                 "
         echo "Selected COMMAND is not for this OS : ${OSuname}"
         echo "################################################"
         exit 1
        fi
        case $OPT in
            INSTALLSTANDALONE)
                Envir
                nimmount
                installlinuxstandalone
                nimunmount
                ;;
            UPDGRADEAGENT)
                nimmount
                upgradeagentlinux
                nimunmount
                ;;
            STARTCTMAGTLINUX)
                StartctmagtLinux
                ;;
            STOPCTMAGTLINUX)
                StopctmagtLinux
                ;;
            UNINSTALLCTMLINUX)
                nimmount
                uninstallCTMLinux
                nimunmount
                ;;
            STARTCTMEM)
                StartctmemLinux
                ;;
            STOPCTMEM)
                StopctmemLinux
                ;;
            STARTCTMSERVER)
                StartctmserverLinux
                ;;
            STOPCTMSERVER)
                StopctmserverLinux
                ;;
            STARTCTMCA)
                StartctmcaLinux
                ;;
            STOPCTMCA)
                StopctmcaLinux
                ;;
            *)
                usage
                ;;
        esac
        ;;
# FR: Branche LINUX: valide l'OS Linux puis déclenche l'installation, upgrade, start/stop et désinstallation selon $OPT (avec montage/démontage si nécessaire).
# EN: LINUX branch: validates Linux OS then performs installation, upgrade, start/stop, and uninstall per $OPT (with mount/unmount when needed).

    AUTRE)
        case $OPT in
            MOUNTNIM)
                nimmount
                ;;
            UMOUNTNIM)
                nimunmount
                ;;
            *)
                usage
                ;;
        esac
        ;;
# FR: Branche AUTRE: utilitaires autonomes pour monter/démonter NIM hors parcours d'installation.
# EN: AUTRE branch: standalone utilities to mount/unmount NIM outside the main install flow.

    *)
        usage
        ;;

esac

exit 0

# ================= RÉSUMÉ / SUMMARY =================
# FR:
# Ce script pilote l'installation, la mise à niveau, le démarrage/arrêt et la désinstallation
# de l'agent Control‑M sur AIX et Linux. Il :
#  - prend en paramètres l'OS (AIX|LINUX), l'action (INSTALL*/UPDGRADEAGENT/START*/STOP*/UNINSTALL*), et l'environnement (HP|PR),
#  - vérifie la cohérence OS et l'environnement,
#  - monte/démonte NIM si nécessaire (AIX),
#  - exécute l'installateur officiel en mode silencieux avec un param.xml versionné,
#  - impose l'usage de BMC_INST_JAVA_HOME via ensure_java avant install/upgrade (pré‑requis 9.0.21.x),
#  - gère des fallbacks vers des wrappers legacy si le média versionné est absent.
#
# EN:
# This script orchestrates install, upgrade, start/stop, and uninstall of the Control‑M agent
# on AIX and Linux. It:
#  - accepts OS (AIX|LINUX), action (INSTALL*/UPDGRADEAGENT/START*/STOP*/UNINSTALL*), and environment (HP|PR),
#  - validates OS consistency and environment,
#  - mounts/unmounts NIM when needed (AIX),
#  - runs the official silent installer with a versioned param.xml,
#  - enforces BMC_INST_JAVA_HOME via ensure_java before install/upgrade (9.0.21.x prerequisite),
#  - provides fallbacks to legacy wrappers if versioned media is missing.
#
# === Ajouts/Modifs pour 9.0.21.300 vs 9.0.20.200 ===
# FR:
# 1) ProductVersion par défaut mis à 9.0.21.300 et rendu paramétrable via CTM_VERSION.
# 2) Intégration explicite de 'ensure_java' avant toutes les opérations d'installation/upgrade (Java externe requis en 9.0.21.x).
# 3) Appel standardisé de l'installateur: setup.sh -silent <param.xml> -BMC_INST_JAVA_HOME "${BMC_INST_JAVA_HOME}".
# 4) Utilisation d'un répertoire média versionné ${Repository}/V${ProductVersion}/AGENT avec 'agent_params.xml' commun AIX/Linux.
# 5) Fallback propre vers les scripts legacy si le média versionné n'est pas présent.
# 6) Démarrage/arrêt Linux: conservation de la logique, avec messages clairs systemctl vs scripts natifs.
#
# EN:
# 1) Default ProductVersion set to 9.0.21.300 and parameterized via CTM_VERSION.
# 2) Explicit 'ensure_java' before all install/upgrade operations (external Java required in 9.0.21.x).
# 3) Standardized installer call: setup.sh -silent <param.xml> -BMC_INST_JAVA_HOME "${BMC_INST_JAVA_HOME}".
# 4) Uses versioned media directory ${Repository}/V${ProductVersion}/AGENT with a common 'agent_params.xml' for AIX/Linux.
# 5) Clean fallback to legacy wrappers when the versioned media is unavailable.
# 6) Linux start/stop: kept logic, with clear messages for systemctl vs native scripts.
